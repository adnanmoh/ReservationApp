// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reservation_APIs.Data;

#nullable disable

namespace Reservation_APIs.Migrations
{
    [DbContext(typeof(ReservationAppContext))]
    [Migration("20240506111847_UserIdResortServiceNullmgt")]
    partial class UserIdResortServiceNullmgt
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Reservation_APIs.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdminID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Reservation_APIs.Models.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsOnline")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    b.HasKey("UserId")
                        .HasName("PK__AppUser__1788CCAC7AE3045C");

                    b.HasIndex("UserTypeId");

                    b.HasIndex(new[] { "Phone" }, "UQ__AppUser__5C7E359ED38AADDB")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__AppUser__A9D105349E9D4EEA")
                        .IsUnique();

                    b.ToTable("AppUser");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatId"), 1L, 1);

                    b.Property<bool?>("IsDeletedFromReceiver")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsDeletedFromSender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("ReceiverId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiverID");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int")
                        .HasColumnName("SenderID");

                    b.HasKey("ChatId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ChatsMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ChatId")
                        .HasColumnType("int")
                        .HasColumnName("ChatID");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsReaded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatsMessages");
                });

            modelBuilder.Entity("Reservation_APIs.Models.FinancialAccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"), 1L, 1);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountId")
                        .HasName("PK__Financia__349DA58652C33B27");

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Reserve", b =>
                {
                    b.Property<int>("ReserveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReserveID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReserveId"), 1L, 1);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsReady")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsRejected")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ReceiptPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("ReserveDate")
                        .HasColumnType("date");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("ResortID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReserveId");

                    b.HasIndex("AccountId");

                    b.HasIndex("ResortId");

                    b.HasIndex("UserId");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Resort", b =>
                {
                    b.Property<int>("ResortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResortID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResortId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsApprovedAdd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsApprovedEdit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberPeople")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ResortTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ResortTypeID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ResortId");

                    b.HasIndex("ResortTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Resorts");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ResortService", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceTypeID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ServiceId")
                        .HasName("PK__ResortSe__C51BB0EA1ECB6905");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("ResortServices");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ResortsPhoto", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PhotoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"), 1L, 1);

                    b.Property<bool?>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("ResortID");

                    b.HasKey("PhotoId")
                        .HasName("PK__ResortsP__21B7B582A74E394F");

                    b.HasIndex("ResortId");

                    b.ToTable("ResortsPhotos");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ResortType", b =>
                {
                    b.Property<int>("ResortTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ResortTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResortTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ResortTypeId");

                    b.ToTable("ResortTypes");
                });

            modelBuilder.Entity("Reservation_APIs.Models.TypesOfService", b =>
                {
                    b.Property<int>("ServiceTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ServiceTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceTypeId")
                        .HasName("PK__TypesOfS__8ADFAA0C710A5731");

                    b.ToTable("TypesOfServices");
                });

            modelBuilder.Entity("Reservation_APIs.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserTypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("ResortAndService", b =>
                {
                    b.Property<int>("ResortId")
                        .HasColumnType("int")
                        .HasColumnName("ResortID");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int")
                        .HasColumnName("ServiceID");

                    b.HasKey("ResortId", "ServiceId")
                        .HasName("PK__ResortAn__C17CCF202D092CDF");

                    b.HasIndex("ServiceId");

                    b.ToTable("ResortAndService", (string)null);
                });

            modelBuilder.Entity("ResortResortService", b =>
                {
                    b.Property<int>("ResortId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("ResortId", "ServiceId");

                    b.ToTable("ResortResortService");
                });

            modelBuilder.Entity("Reservation_APIs.Models.AppUser", b =>
                {
                    b.HasOne("Reservation_APIs.Models.UserType", "UserType")
                        .WithMany("AppUsers")
                        .HasForeignKey("UserTypeId")
                        .HasConstraintName("FK__AppUser__UserTyp__33D4B598");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Chat", b =>
                {
                    b.HasOne("Reservation_APIs.Models.AppUser", "Receiver")
                        .WithMany("ChatReceivers")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK__Chats__ReceiverI__4316F928");

                    b.HasOne("Reservation_APIs.Models.AppUser", "Sender")
                        .WithMany("ChatSenders")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK__Chats__SenderID__440B1D61");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ChatsMessage", b =>
                {
                    b.HasOne("Reservation_APIs.Models.Chat", "Chat")
                        .WithMany("ChatsMessages")
                        .HasForeignKey("ChatId")
                        .HasConstraintName("FK__ChatsMess__ChatI__534D60F1");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Reserve", b =>
                {
                    b.HasOne("Reservation_APIs.Models.FinancialAccount", "Account")
                        .WithMany("Reserves")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Reserve__Account__4E88ABD4");

                    b.HasOne("Reservation_APIs.Models.Resort", "Resort")
                        .WithMany("Reserves")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK__Reserve__ResortI__4D94879B");

                    b.HasOne("Reservation_APIs.Models.AppUser", "User")
                        .WithMany("Reserves")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reserve__UserID__4F7CD00D");

                    b.Navigation("Account");

                    b.Navigation("Resort");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Resort", b =>
                {
                    b.HasOne("Reservation_APIs.Models.ResortType", "ResortType")
                        .WithMany("Resorts")
                        .HasForeignKey("ResortTypeId")
                        .HasConstraintName("FK__Resorts__ResortT__398D8EEE");

                    b.HasOne("Reservation_APIs.Models.AppUser", "User")
                        .WithMany("Resorts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Resorts__UserID__3A81B327");

                    b.Navigation("ResortType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ResortService", b =>
                {
                    b.HasOne("Reservation_APIs.Models.TypesOfService", "ServiceType")
                        .WithMany("ResortServices")
                        .HasForeignKey("ServiceTypeId")
                        .HasConstraintName("FK__ResortSer__Servi__2D27B809");

                    b.HasOne("Reservation_APIs.Models.AppUser", "User")
                        .WithMany("ResortServices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ResortsPhoto", b =>
                {
                    b.HasOne("Reservation_APIs.Models.Resort", "Resort")
                        .WithMany("ResortsPhotos")
                        .HasForeignKey("ResortId")
                        .HasConstraintName("FK__ResortsPh__Resor__3E52440B");

                    b.Navigation("Resort");
                });

            modelBuilder.Entity("ResortAndService", b =>
                {
                    b.HasOne("Reservation_APIs.Models.Resort", null)
                        .WithMany()
                        .HasForeignKey("ResortId")
                        .IsRequired()
                        .HasConstraintName("FK__ResortAnd__Resor__46E78A0C");

                    b.HasOne("Reservation_APIs.Models.ResortService", null)
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("FK__ResortAnd__Servi__47DBAE45");
                });

            modelBuilder.Entity("Reservation_APIs.Models.AppUser", b =>
                {
                    b.Navigation("ChatReceivers");

                    b.Navigation("ChatSenders");

                    b.Navigation("Reserves");

                    b.Navigation("ResortServices");

                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Chat", b =>
                {
                    b.Navigation("ChatsMessages");
                });

            modelBuilder.Entity("Reservation_APIs.Models.FinancialAccount", b =>
                {
                    b.Navigation("Reserves");
                });

            modelBuilder.Entity("Reservation_APIs.Models.Resort", b =>
                {
                    b.Navigation("Reserves");

                    b.Navigation("ResortsPhotos");
                });

            modelBuilder.Entity("Reservation_APIs.Models.ResortType", b =>
                {
                    b.Navigation("Resorts");
                });

            modelBuilder.Entity("Reservation_APIs.Models.TypesOfService", b =>
                {
                    b.Navigation("ResortServices");
                });

            modelBuilder.Entity("Reservation_APIs.Models.UserType", b =>
                {
                    b.Navigation("AppUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
